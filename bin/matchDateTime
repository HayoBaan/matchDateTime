#!/usr/bin/perl
use strict;
use warnings;

our $VERSION = '0.012';

=head1 NAME

matchDateTime -- matches date/time info in movie files where ExifTool
is unable to.

=head1 VERSION

version 0.012

=head1 DESCRIPTION

C<matchDateTime> updates the date/time info in (movie) files where
ExifTool is unable to.

For "normal" movie files, the maker note DateTimeOriginal, QuickTime
CreationDate, XML LastUpdate, and XML CreationDateValue dates (and any
other matching dates) are updated with the date as set in the
QuickTime CreateDate.

MTS and M2TS movie files are handled specially, in that here we take
the file modification date as the new target date and update all
occurrences of the DateTimeOriginal with this. All sequential
timestamps are updated as well.

Important: No other date/time tags than as described will get
updated. So if you want any other tags to change as well, you will
need to additionally use C<exiftool>. This also means that if you use
the file modification time to specify the date/time to set, you will
need to update the QuickTime CreateDate to reflect this (e.g. by using
C<exiftool -api QuickTimeUTC "-QuickTime:CreateDate<FileModifyDate"
FILE>).

By default, the timezone information is left as was recorded by the
camera, but you can change this by specifying a different timzezone
(and, for MTS and M2TS files, a different daylight savings flag).

The tool works by replacing any sequence of bytes that exactly match
the original value by the (correctly formatted) QuickTime
CreateDate. Note that with this approach it is possible that actual
movie data is changed as well. This, however, is extremely unlikely:
the chance of this occuring is less than 1/256^20 (1/256^10 for
MTS/M2TS files).

=head1 SYNOPSIS

  matchDateTime [-recurse] [-overwrite] [-modtime] [-utc] [-tz TZ [-dst]] <Files>

=head1 OPTIONS

The following options are available.

Note: option names can be abbreviated so e.g. C<-r> or C<-rec> can be
used instead of the full option name C<-recurse>.

=over 4

=item -recurse

Recurse directories. This will have matchDateTime process B<all> files
in those directories, so use with care!

=item -overwrite

Overwrites the original file instead of renaming it to C<_original>.

=item -modtime

Instructs matchDateTime to use the file modification time instead of
the QuickTime CreateDate.

Note: This option is always in effect when matching the date times of
MTS and M2TS files.

=item -utc

Indicates that QuickTime times are in UTC. This will convert the
QuickTime time back to the local time, so any updates to the maker
notes DateTimeOriginal and the CreationDate will also be in this time.

With this option, if the file was recorded in a different timezone
from your local, you should (temporarily) set the timezone to the
timezone at the location of the recording. In Unix or on a Mac, this
can be done by setting the TZ variable for the duration of the
C<matchDateTime> command like so: C<TZ="America/New_York"
matchDateTime -utc FILE>.

=item -tz I<TZ>

Use I<TZ> as the new time zone. Specify the time zone in hours.

=item -dst

Indicates the daylight savings flag should be set when writing the new
timezone information (only used when the C<-tz> option is also
specified).

=back

=head1 PREREQUISITES

matchDateTime requires both L<Perl|https://www.perl.org/> and
L<ExifTool|http://www.sno.phy.queensu.ca/~phil/exiftool/> to be
installed.

=head1 INSTALLATION

No installation is required, the script can be called
directly. Optionally you can put the script in a directory on your
path so it can be run from anywhere. On windows you may need to give
the file an extension that is recognized as perl command (e.g.,
`.PL`).

=head1 AUTHOR

Hayo Baan <info@hayobaan.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2016 by Hayo Baan.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut

use Getopt::Long;
use Pod::Usage;

# Options
my ($help, $recurse, $overwrite, $modtime, $utc, $tz, $dst);
GetOptions(
    'help|?'    => \$help,
    'recurse'   => \$recurse,
    'overwrite' => \$overwrite,
    'modtime'   => \$modtime,
    'utc'       => \$utc,
    'tz=i'      => \$tz,
    'dst'       => \$dst,
) or pod2usage(-exitstatus => 1, -verbose => 0);
pod2usage(-exitstatus => 0, -verbose => 2) if $help;
pod2usage(-exitstatus => 1, -verbose => 0) unless @ARGV;

# Read file into given buffer (reference)
sub readFile {
    my $file = shift;
    my $buffer = shift;

    open(my $fh, '<:raw' ,$file) or die "Can't open $file: $!\n";
    my $filesize = -s $file;
    read($fh, $$buffer, $filesize) == $filesize or die "Unable to read all data in $file: $!\n";
    close($fh);

    return;
}

# Write given buffer (reference) to file
sub writeFile {
    my $file = shift;
    my $buffer = shift;
    my $orgModifyDate = shift;

    my $org = $file . "_original";
    if (!$overwrite && !-e $org) {
        rename($file, $org) or die "Unable to create _original file: $!\n";
    }

    open(my $fh, '>:raw' ,$file) or die "Can't open $file: $!\n";
    (print $fh $$buffer) or die "Unable to write all data to $file: $!\n";
    close($fh);

    # Restore file modify date
    my $res = qx(exiftool -File:System:FileModifyDate="$orgModifyDate" "$file");

    return;
}

sub addSecond {
    my $dateTime = shift;

    my ($year, $month, $day, $hour, $minute, $second) = $dateTime =~ /(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})/;

    $second++;
    if ($second >= 60) {
        $second = 0;
        $minute++;
    }
    if ($minute >= 60) {
        $minute = 0;
        $hour++;
    }
    if ($hour >=24) {
        $hour = 0;
        $day++;
        printf "WARNING: Day added, might be an illegal date!!!";
    }

    return sprintf("%04d:%02d:%02d %02d:%02d:%02d", $year, $month, $day, $hour, $minute, $second);
}


sub fromH264Tz {
    my $h264Tz = ord(shift);

    my $dst = $h264Tz & 0x40;
    my $tz = ($h264Tz & 0x20 ? -1 : 1) * (($h264Tz >> 1) & 0x0f);

    return ($tz, $dst);
}

sub toH264Tz {
    my $tz = shift;
    my $dst = shift;

    my $neg = $tz<0;
    $tz = abs($tz);

    return chr((abs($tz) << 1) | ($dst ? 0x40 : 0) | ($neg ? 0x20 : 0));
}

sub toH264Char {
    my $val = shift;
    my $asRegex = shift;
    my $h264 = chr(16*(int $val / 10) + ($val % 10));

    return $asRegex ? quotemeta($h264) : $h264;
}

sub toH264DateTime {
    my $dateTime = shift;
    my $tz = shift;
    my $dst = shift;
    my $asRegex = shift;

    my $h264 = toH264Char(18, $asRegex);
    $h264 .= defined $tz ? ($asRegex ? quotemeta(toH264Tz($tz, $dst)) : toH264Tz($tz, $dst)) : '(.)';
    $dateTime =~ /(\d{2})(\d{2}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})/;
    $h264 .= toH264Char($1, $asRegex);
    $h264 .= toH264Char($2, $asRegex);
    $h264 .= toH264Char($3, $asRegex);
    $h264 .= toH264Char(19, $asRegex);
    $h264 .= toH264Char($4, $asRegex);
    $h264 .= toH264Char($5, $asRegex);
    $h264 .= toH264Char($6, $asRegex);
    $h264 .= toH264Char($7, $asRegex);

    return $h264;
}

sub processMts {
    my $file = shift;

    # Get datetime information from exiftool
    my $datetimeInfo = qx(exiftool --a -s -File:System:FileModifyDate -H264:DateTimeOriginal "$file");
    my ($modifyDate, $modifyDateTZ) = $datetimeInfo =~ /FileModifyDate\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2})(.*)/;
    print("Skipped: Unable to find FileModifyDate in $file\n"), return if !defined $modifyDate;
    my ($dateTimeOriginal) = $datetimeInfo =~ /DateTimeOriginal\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2})/;
    print("Skipped: Unable to find H264 DateTimeOriginal in $file\n"), return if !defined $dateTimeOriginal;
    print("Skipped: Dates already the same in $file\n"), return if ($modifyDate eq $dateTimeOriginal) && (!defined $tz);

    my $data;
    readFile($file, \$data);

    # Get original timezone / dst
    my $from = toH264DateTime($dateTimeOriginal, undef, undef, 1);
    my ($orgTzInfo) = $data =~ /$from/;
    my ($orgTz, $orgDst) = fromH264Tz($orgTzInfo);
    if (!defined $tz) {
        $tz = $orgTz;
        $dst = $orgDst;
    }
    my $fromDate = $dateTimeOriginal;
    my $toDate = $modifyDate;
    $from = toH264DateTime($fromDate, $orgTz, $orgDst, 1);
    my $to = toH264DateTime($toDate, $tz, $dst, 0);

    # Now change all datetimes found, increasing time by one second until no more matches
    my $totalNr = 0;
    while (my $nr = $data =~ s/$from/$to/g) {
        printf "Updated $fromDate %+03d:00%s => $toDate %+03d:00%s in $file ($nr times)\n", $orgTz, $orgDst ? " DST" : "", $tz, $dst ? " DST" : "";
        $totalNr += $nr;
        $fromDate = addSecond($fromDate);
        $toDate = addSecond($toDate);
        $from = toH264DateTime($fromDate, $orgTz, $orgDst, 1);
        $to = toH264DateTime($toDate, $tz, $dst, 0);
    }

    if ($totalNr) {
        writeFile($file, \$data, "$modifyDate$modifyDateTZ");
        print "OK: Changed date $totalNr times in $file\n";
    } else {
        print "WARNING: No changes made to $file\n";
    }

    return $totalNr;
}

sub processNormal {
    my $file = shift;

    # Get datetime information from exiftool
    $utc = $utc ? "-api QuickTimeUTC" : "";
    my $datetimeInfo = qx(exiftool --a -s $utc -File:System:FileModifyDate -QuickTime:CreateDate -MakerNotes:DateTimeOriginal -QuickTime:CreationDate "-QuickTime:CreationDate-*-*" -XML:LastUpdate -XML:CreationDateValue "$file");
    my ($modifyDate, $modifyDateTZ) = $datetimeInfo =~ /FileModifyDate\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2})([+-]\d{2}:\d{2})?/;
    $modifyDateTZ = "" if !defined $modifyDateTZ;
    print("Skipped: Unable to find FileModifyDate in $file\n"), return if !defined $modifyDate;
    my $createDate;
    my $createDateTZ;
    if (!$modtime) {
        ($createDate, $createDateTZ) = $datetimeInfo =~ /CreateDate\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2})([+-]\d{2}:\d{2})?/;
        print("Skipped: Unable to find QuickTime CreateDate in $file\n"), return if !defined $createDate;
    } else {
        ($createDate, $createDateTZ) = ($modifyDate, $modifyDateTZ)
    }
    if ($utc && !defined $createDateTZ) {
        printf("Skipped: No TimeZone information present for $file\n"), return if !$createDateTZ;
    }
    my ($dateTimeOriginal) = $datetimeInfo =~ /DateTimeOriginal\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2})/;
    my @creationDates = $datetimeInfo =~ /CreationDate(?:-.*-.*)?\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2}[+-]\d{2}:\d{2})/g;
    @creationDates = do { my %seen; grep { !$seen{$_}++ } @creationDates };
    my ($lastUpdate) = $datetimeInfo =~ /LastUpdate\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2}[+-]\d{2}:\d{2})/;
    my ($creationDateValue) = $datetimeInfo =~ /CreationDateValue\s*:\s*(\d{4}:\d{2}:\d{2} \d{2}:\d{2}:\d{2}[+-]\d{2}:\d{2})/;
    my @xmlDates;
    if (defined $lastUpdate) {
        push @xmlDates, $lastUpdate;
        push @xmlDates, $creationDateValue if defined $creationDateValue && $lastUpdate ne $creationDateValue;
    } elsif (defined $creationDateValue) {
        push @xmlDates, $creationDateValue;
    }

    print("Skipped: Unable to find MakerNotes DateTimeOriginal, Creation Date, or XML Date in $file\n"), return if (!defined $dateTimeOriginal && !@creationDates && !@xmlDates);

    # Read file
    my $data;
    readFile($file, \$data);

    my ($from, $to);
    my $changed = 0;

    # Change all dateTimeOriginal dates to match createDate
    if (defined $dateTimeOriginal) {
        $from = chr(20) . $dateTimeOriginal . chr(0);
        $to = chr(20) . $createDate . chr(0);
        if ($from ne $to) {
            my $nr = $data =~ s/\Q$from\E/$to/g;
            $changed += $nr;
            print "Updated DateTimeOriginal $dateTimeOriginal => $createDate in $file ($nr times)\n";
        }
    }

    # Change all CreationDate dates to match createDate
    for my $creationDate (@creationDates) {
        $from = $creationDate;
        $from =~ s/(\d{4}):(\d{2}):(\d{2}) (\d{2}:\d{2}:\d{2})([+-]\d{2}):(\d{2})/$1-$2-$3T$4$5$6/;
        my $totz = defined $tz ? sprintf("%+03d00", $tz) : "$5$6";
        if (($modtime && $createDateTZ) || ($utc && !defined $tz)) {
            $totz = $createDateTZ;
            $totz =~ s/://;
        }
        $to = "$createDate$totz";
        $to =~ s/(\d{4}):(\d{2}):(\d{2}) (\d{2}:\d{2}:\d{2})([+-]\d{2}\d{2})/$1-$2-$3T$4$5/;
        if ($from ne $to) {
            my $nr = $data =~ s/\Q$from\E/$to/g;
            $changed += $nr;
            print "Updated CreationDate $from => $to in $file ($nr times)\n";
        }
    }

    # Change all XML (=LastUpdate and/or CreationDateValue) dates to match createDate
    for my $xmlDate (@xmlDates) {
        $from = $xmlDate;
        $from =~ s/(\d{4}):(\d{2}):(\d{2}) (\d{2}:\d{2}:\d{2})([+-]\d{2}:\d{2})/$1-$2-$3T$4$5/;
        my $totz = defined $tz ? sprintf("%+03d:00", $tz) : "$5";
        if (($modtime && $createDateTZ) || ($utc && !defined $tz)) {
            $totz = $createDateTZ;
        }
        $to = "$createDate$totz";
        $to =~ s/(\d{4}):(\d{2}):(\d{2}) (\d{2}:\d{2}:\d{2})([+-]\d{2}:\d{2})/$1-$2-$3T$4$5/;
        if ($from ne $to) {
            my $nr = $data =~ s/\Q$from\E/$to/g;
            $changed += $nr;
            print "Updated XML Date $from => $to in $file ($nr times)\n";
        }
    }

    # Write updated file (if changes were made)
    if ($changed) {
        writeFile($file, \$data, "$modifyDate$modifyDateTZ");
        print "OK: Changed date $changed times in $file\n";
    } else {
        print "WARNING: No changes made to $file\n";
    }

    return $changed;
}

my @ORG_ARGV = @ARGV; # So we can check if dir was provided on command-line
while (@ARGV) {
    my $file = shift;

    if (-f $file) {
        if ($file =~ /\.(?:mts|m2ts)$/i) {
            processMts($file)
        } else {
            processNormal($file);
        }
    } elsif (-d $file && ($recurse || grep { $file eq $_ } @ORG_ARGV)) { # Always process dirs given on command-line
        $file =~ s/^(.+)\/$/$1/; # Strip trailing /
         # Process directories recursively
         unshift(@ARGV, glob(qq{"$file/*"}));
    } else {
        warn((-e $file ? "Ignored file" : "File does not exist") . ": $file\n");
    }
}
